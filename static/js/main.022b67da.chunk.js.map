{"version":3,"sources":["component/reducer.jsx","component/add-block.jsx","component/action-creator.jsx","component/list-item.jsx","component/list.jsx","component/sirch-panel.jsx","component/app.jsx","index.js"],"names":["reducer","state","type","payload","newState","currenCaseId","findIndex","element","id","undefined","splice","important","idCounter","AddBlock","useState","inputValue","useinputValue","className","onChange","event","target","value","placeholder","onClick","prop","newCase","label","store","dispatch","ListItem","List","props","caseMassive","currentFilterList","importantFilter","filter","inputFilter","includes","map","SirchInput","setCurrentFilterList","createStore","App","getState","currentStore","setCurrentStore","subscribe","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.022b67da.chunk.js","sourcesContent":["const reducer = function (state = [], { type, payload }) {\r\n  let newState = [...state];\r\n\r\n  let currenCaseId =\r\n    type === \"DLT\" || type === \"CHNG\"\r\n      ? newState.findIndex((element) => element.id === payload)\r\n      : undefined;\r\n\r\n  switch (type) {\r\n    case \"ADD\":\r\n      return [...state, payload];\r\n\r\n    case \"DLT\":\r\n      newState.splice(currenCaseId, 1);\r\n      return newState;\r\n\r\n    case \"CHNG\":\r\n      newState[currenCaseId].important = !newState[currenCaseId].important;\r\n      return newState;\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { useState } from \"react\";\r\nimport { add } from \"./action-creator\";\r\n// variable for create if for new case\r\nlet idCounter = 0;\r\n\r\nexport function AddBlock() {\r\n  let [inputValue, useinputValue] = useState(\"\");\r\n\r\n  function formChange(event) {\r\n    useinputValue(event.target.value);\r\n  }\r\n  // created new case and send it to reduser\r\n  function addCase() {\r\n    let newCase = {\r\n      label: inputValue,\r\n      important: false,\r\n      id: idCounter,\r\n    };\r\n    idCounter = idCounter + 1;\r\n\r\n    add(newCase);\r\n\r\n    useinputValue(\"\");\r\n  }\r\n  return (\r\n    <div className=\"input-block\">\r\n      <input\r\n        type=\"text\"\r\n        onChange={formChange}\r\n        value={inputValue}\r\n        placeholder=\"input new case\"\r\n      />\r\n      <button className=\"addCase\" onClick={addCase} value={inputValue}>\r\n        ADD\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import { store } from \"./app\";\r\n\r\nexport const add = (prop) => {\r\n  store.dispatch({\r\n    type: \"ADD\",\r\n    payload: prop,\r\n  });\r\n};\r\n\r\nexport const del = (prop) => {\r\n  store.dispatch({\r\n    type: \"DLT\",\r\n    payload: prop,\r\n  });\r\n};\r\n\r\nexport const importantChange = (prop) => {\r\n  store.dispatch({\r\n    type: \"CHNG\",\r\n    payload: prop,\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { del, importantChange } from \"./action-creator\";\r\n\r\nfunction ListItem({ element }) {\r\n  let { label, important, id } = element;\r\n\r\n  function deleteElement() {\r\n    del(id);\r\n  }\r\n  function changeElement() {\r\n    importantChange(id);\r\n  }\r\n  \r\n  return (\r\n    <li className={important ? \"important list-item\" : \"list-item\"}>\r\n      <button className=\"button-important\" onClick={changeElement}>\r\n        <i className=\"fa fa-exclamation\"></i>\r\n      </button>\r\n      <span>{label}</span>\r\n      <button className=\"button-delete\" onClick={deleteElement}>\r\n        <i className=\"fa fa-trash-o\"></i>\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\nexport default ListItem;\r\n","\r\nimport ListItem from \"./list-item\";\r\n\r\nexport function List(props) {\r\n  // accept massive and filter list and show handled massive\r\n  let { caseMassive, currentFilterList } = props;\r\n\r\n  if (currentFilterList.importantFilter) {\r\n    caseMassive = caseMassive.filter((element) => element.important === true);\r\n  }\r\n\r\n  if (currentFilterList.inputFilter) {\r\n    caseMassive = caseMassive.filter(\r\n      (element) => element.label.includes(currentFilterList.inputValue) === true\r\n    );\r\n  }\r\n  return (\r\n    <ol>\r\n      {caseMassive.map((element) => {\r\n        return <ListItem key={element.id} element={element} />;\r\n      })}\r\n    </ol>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { List } from \"./list\";\r\n\r\nexport function SirchInput({ caseMassive }) {\r\n  let filterList = {\r\n    inputFilter: false,\r\n    inputValue: \"\",\r\n    importantFilter: false,\r\n  };\r\n\r\n  let [currentFilterList, setCurrentFilterList] = useState(filterList);\r\n  function showImportant() {\r\n    setCurrentFilterList({ ...currentFilterList, importantFilter: true });\r\n  }\r\n  function showAll() {\r\n    setCurrentFilterList({ ...currentFilterList, importantFilter: false });\r\n  }\r\n\r\n  function serchChange(event) {\r\n    if (event.target.value !== \"\") {\r\n      setCurrentFilterList({\r\n        ...currentFilterList,\r\n        inputFilter: true,\r\n        inputValue: event.target.value,\r\n      });\r\n    } else {\r\n      setCurrentFilterList({\r\n        ...currentFilterList,\r\n        inputFilter: false,\r\n        inputValue: \"\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"find-block\">\r\n        <button\r\n          className={currentFilterList.importantFilter ? \"\" : \"red-shadow\"}\r\n          onClick={showAll}\r\n        >\r\n          All case\r\n        </button>\r\n        <button\r\n          className={currentFilterList.importantFilter ? \"red-shadow\" : \"\"}\r\n          onClick={showImportant}\r\n        >\r\n          only important\r\n        </button>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          onChange={serchChange}\r\n          placeholder=\"input what you are looking \"\r\n        />\r\n      </div>\r\n      <List caseMassive={caseMassive} currentFilterList={currentFilterList} />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport { AddBlock } from \"./add-block\";\r\nimport { SirchInput } from \"./sirch-panel\";\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport function App() {\r\n  let [currentStore, setCurrentStore] = useState(store.getState());\r\n\r\n  store.subscribe(() => {\r\n    setCurrentStore(store.getState());\r\n  });\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"main-block\">\r\n        <h1>ToDo List</h1>\r\n        <SirchInput caseMassive={currentStore} />\r\n        <AddBlock />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport{App} from './component/app';\r\nimport './style.css'\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}